Several things I'd like to fix:
1) Posn.toString (and use it in the other toString methods)
2) Fix commas and newlines in toStrings
3) Have toString use toIndentedString

4) Add convenience methods that take either two ints or a Posn

5) Figure out what pinholes are supposed to be, and make them that
consistently
	If they're a center, store them as ints in doubled form

6) Add methods "addBelow", "addRight", and aligned versions of same.



I've worked on some of the above, and concluded that Viera's pinholes are irremediably broken.  If I want things to feel like they do in DrRacket, images shouldn't have a location at all.  OTOH, if I want any semblance of compatibility with Viera's work, images DO need a location.  I don't want to use the name "pinhole", because these things don't act anything like htdp's pinholes.

Option 1: images have a location.  It's just a translation vector, telling where the top-left corner of the image's bounding box is relative to the top-left corner of its containing image (or should it be relative to the window?)  If it's relative to the containing image, then 
a) translating an image doesn't require recurring into its sub-parts;
b) one could potentially have multiple copies of object A, each of which contains a shared copy of object B, and moving an A (even mutatingly) wouldn't mutate its B;
c) drawing an image into "the window" is just a special case of the same mechanism we'll need everywhere else anyway.

Option 2: images do not have a location; we'll place them onto background images explicitly with something like place-image or overlay/xy.


OK, I've started implementing my version of Option 1.  Question: do we actually need the RectangularImage and CircularImage classes, or can they be collapsed with Colored{Rectangular,Circular}Image?

Dec. 2, 2012:
I just generated 1200-odd lines of code, with maybe 30 lines of actual
semantic content; the rest is mostly lots of copies of constructors
with different argument lists (since constructors can't be inherited),
and copies of other methods that invoke those constructors (and
therefore can't be inherited either).

Dec. 5, 2012:
Added SBImageAdapter class to make my images (hopefully) work in the
rest of Viera's libraries, most notably "funworld" and "impworld".

Dec. 12, 2012:
Back to Option 2, sort of.  Images "have" a translation, but for most of
them it's (0,0).  There's a Translate class that takes an existing image
and translates it somewhere else.  This allowed me to snip out 15-20% of
the lines of code in the package.

Dec. 19, 2012: Not actually working on this until semester grades are
in, but I want to provide equivalents of "rotate", "reflect", "scale",
and "scale/xy" (of which "scale" is presumably a special case).
It would probably be easiest to "rotate" around (0,0), but that will
produce bounding boxes with negative top or left coordinates.  Should I
just rotate around (0,0) and then translate as necessary to put the top
left corner at (0,0)?  Should I provide a "rotateAround" entrypoint that
rotates around a specified Posn?  And the same issues come up with
"reflect".

I am increasingly annoyed with Java constructors: they ALWAYS return a
newly-allocated instance of the class, never an existing instance, or an
instance of a subclass, etc.  They're unavoidably tied to implementation,
and they don't belong in an API.  Can I convince Viera that the API
shouldn't expose constructors?  Or at least that it should expose only
the constructors of primitive image classes (Circle, Rectangle, Line,
Text, etc.) but not the ones that correspond to operators (Overlay,
Above, Beside, Scale, Rotate, Reflect, Translate)?

Dec. 23, 2012: I started adding Rotate, and realized that Java's
AffineTransform class already does most of what I would want from
Translate, and Rotate, and Reflect, and Scale, and ScaleXY; maybe the
right answer is a single class LinearImage which applies an arbitrary
AffineTransform to another image.  This wouldn't necessarily be exposed
in the API.

Dec. 24, 2012: Did the above.  Added PolygonImage, FilledPolygonImage,
and PolyLineImage, making FilledTriangleImage, OutlinedTriangleImage,
and LineImage subclasses of these as appropriate.

We have a FromFileImage, but not the obvious FromURLImage.  I don't
think it should be difficult to get that working, but it's not my top
priority right now.

I put in a "mode" field that distinguishes between filled and outlined,
as in htdp.  This saves a whole lot of duplicate code and allows me to
delete several whole classes.

Reflection now preserves location.  That's the easy one, since the
bounding box after X or Y reflection is the same shape as the bounding
box before.  What about rotation?  The easiest thing to do is rotate
around (0,0), but that's almost certainly not what the user wants.  I
could rotate around the center of the bounding box, or I could make the
top-left corner after rotation the same as the top-left corner before
rotation (with results similar to those in 2htdp -- although I'm not
sure what would happen if you rotated 60 degrees 6 times in succession,
which in a just world should be the identity).

Dec. 26, 2012: I can create images from a local file or from a URL on
the Web.  I can freeze (render and memoize) an existing image.  I can
save an image as a local PNG file.  I have most of the functionality of
PP chapters 1-3.  I've defined the prerolled image variables (pic:bloch
et al), but they're currently commented out.  I have an equivalent of
place-image.  I don't have right-triangle, isosceles-triangle, etc. but
I have a triangle with three arbitrary vertices (and even a polygon with
arbitrary vertices).

I've written a FunWorld world that uses my image library, rotating a
picture of me by 1 degree every .01 second.

It's still a pain negotiating between WorldImage and Image; I would
prefer to just REPLACE WorldImage, but I haven't confirmed that the rest
of javalib would compile and run.
